name: CICD Pipeline

on:
  push:
    paths:
      - 'server/**'
      - 'supabase/**'
      - '.github/**'
    branches:
      - main
      - developing

  pull_request:
    paths:
      - 'server/**'
      - 'supabase/**'
      - '.github/**'
    branches:
      - main
      - developing

jobs:
  push-migrations:
    name: Push migrations to database
    runs-on: ubuntu-latest
    environment:
      name: ${{
        github.base_ref == 'main' && 'Prod' ||
        github.ref_name == 'main' && 'Prod' ||
        github.base_ref == 'developing' && 'Dev' ||
        github.ref_name == 'developing' && 'Dev'}}
    env:
      environment: ${{
        github.base_ref == 'main' && 'Prod' ||
        github.ref_name == 'main' && 'Prod' ||
        github.base_ref == 'developing' && 'Dev' ||
        github.ref_name == 'developing' && 'Dev'}}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.DB_PASSWORD}}
      SUPABASE_PROJECT_ID: ${{ secrets.PROJECT_ID}}
    steps:
      - name: Print environment
        run: |
          echo "Running on environment: $ENVIRONMENT"

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase Project
        run: supabase link --project-ref $SUPABASE_PROJECT_ID

      - name: Preview Database Changes (Dry Run)
        run: |
          if [ "$environment" = "Dev" ]; then
            supabase db push --dry-run
          elif [ "$environment" = "Prod" ]; then
            supabase db push --dry-run
          else
            echo "Error: Unknown environment '$environment'. Expected 'Dev' or 'Prod'."
            exit 1
          fi

      - name: Apply database migrations
        run: |
          if [ "$environment" = "Dev" ]; then
            supabase db push
          elif [ "$environment" = "Prod" ]; then
            supabase db push
          else
            echo "Error: Unknown environment '$environment'. Expected 'Dev' or 'Prod'."
            exit 1
          fi


  build:
    name: Build backend image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t unimap ./server

      - name: Save Docker image as artifact
        run: docker save unimap| gzip > image.tar.gz

      - name: Upload image artifact to share across jobs
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar.gz


  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: [build, push-migrations]
    environment:
      name: ${{
        github.base_ref == 'main' && 'Prod' ||
        github.ref_name == 'main' && 'Prod' ||
        github.base_ref == 'developing' && 'Dev' ||
        github.ref_name == 'developing' && 'Dev'}}
    env:
      environment: ${{
        github.base_ref == 'main' && 'Prod' ||
        github.ref_name == 'main' && 'Prod' ||
        github.base_ref == 'developing' && 'Dev' ||
        github.ref_name == 'developing' && 'Dev'}}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}

    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          gunzip -c image.tar.gz | docker load

      - name: List Docker images
        run: docker images

      - name: Run tests inside Docker
        run: |
          if [ "$environment" = "Dev" ]; then
            docker run --rm -e DATABASE_URL=$DATABASE_URL unimap pytest
          fi


  deploy:
    name: Deploy to ECR & EC2
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: ${{
        github.base_ref == 'main' && 'Prod' ||
        github.ref_name == 'main' && 'Prod' ||
        github.base_ref == 'developing' && 'Dev' ||
        github.ref_name == 'developing' && 'Dev'}}
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          gunzip -c image.tar.gz | docker load

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag image for ECR
        run: docker tag unimap:latest ${{ secrets.ECR_URI }}:latest

      - name: Push image to ECR
        run: docker push ${{ secrets.ECR_URI }}:latest

      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Docker container from GitHub Actions" \
            --targets "Key=InstanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
            --parameters 'commands=[
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}",
              "docker pull ${{ secrets.ECR_URI }}:latest",
              "docker stop unimap || true",
              "docker rm unimap || true",
              "docker run --rm -d --name unimap -e DATABASE_URL=${{ secrets.DATABASE_URL }} -p 8000:8000 ${{ secrets.ECR_URI }}:latest"
            ]' \
            --region $AWS_REGION