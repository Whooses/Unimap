

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "wrappers" WITH SCHEMA "extensions";






CREATE FOREIGN DATA WRAPPER "auth0_wrapper" HANDLER "extensions"."auth0_fdw_handler" VALIDATOR "extensions"."auth0_fdw_validator";



SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."event" (
    "id" bigint NOT NULL,
    "title" character varying DEFAULT 'none'::character varying NOT NULL,
    "description" "text" DEFAULT 'none'::"text",
    "date" timestamp with time zone,
    "location" character varying DEFAULT 'none'::character varying,
    "user_id" bigint NOT NULL,
    "image_url" character varying DEFAULT 'none'::character varying NOT NULL,
    "is_public" boolean,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone,
    "username" "text" DEFAULT 'none'::"text",
    "departments" "text"[],
    "categories" "text"[],
    "clubs" "text"[],
    "types" "text"[],
    "owner_id" bigint DEFAULT '0'::bigint NOT NULL,
    "is_in_person" boolean DEFAULT false,
    "is_online" boolean DEFAULT false,
    CONSTRAINT "events_owner_id_check" CHECK (("owner_id" >= 0))
);


ALTER TABLE "public"."event" OWNER TO "postgres";


COMMENT ON TABLE "public"."event" IS 'Store events informations';



COMMENT ON COLUMN "public"."event"."departments" IS 'departments';



COMMENT ON COLUMN "public"."event"."categories" IS 'categories';



COMMENT ON COLUMN "public"."event"."clubs" IS 'clubs';



COMMENT ON COLUMN "public"."event"."types" IS 'event types';



COMMENT ON COLUMN "public"."event"."owner_id" IS 'the user that posted the post (used for channels)';



ALTER TABLE "public"."event" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Events_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."auth0_users" (
    "auth0_id" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "username" "text" NOT NULL,
    "pfp_url" "text"
);


ALTER TABLE "public"."auth0_users" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."bug_reports" (
    "id" integer NOT NULL,
    "description" "text" NOT NULL,
    "page_url" character varying,
    "screenshot_url" character varying,
    "reporter_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."bug_reports" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."bug_reports_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."bug_reports_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."bug_reports_id_seq" OWNED BY "public"."bug_reports"."id";



CREATE TABLE IF NOT EXISTS "public"."event_reports" (
    "id" integer NOT NULL,
    "reason" "text" NOT NULL,
    "event_id" bigint NOT NULL,
    "reporter_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."event_reports" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."event_reports_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."event_reports_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."event_reports_id_seq" OWNED BY "public"."event_reports"."id";



CREATE TABLE IF NOT EXISTS "public"."favourites" (
    "user_id" bigint NOT NULL,
    "event_id" bigint NOT NULL
);


ALTER TABLE "public"."favourites" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."follows" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" bigint NOT NULL,
    "follower_id" bigint NOT NULL
);


ALTER TABLE "public"."follows" OWNER TO "postgres";


COMMENT ON TABLE "public"."follows" IS 'The information of all follows in the program. This table creation was chosen over other types of following systems due to multiple reasons, txt me for any questions.';



CREATE TABLE IF NOT EXISTS "public"."school" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "state_province" "text",
    "city" "text",
    "country" "text",
    "latitude" numeric,
    "longitude" numeric
);


ALTER TABLE "public"."school" OWNER TO "postgres";


ALTER TABLE "public"."school" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."school_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."user" (
    "id" bigint NOT NULL,
    "username" "text" NOT NULL,
    "email" "text" NOT NULL,
    "pfp_url" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone,
    "is_verified" boolean DEFAULT false,
    "timezone" "text",
    "auth0_id" "text"
);


ALTER TABLE "public"."user" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_school" (
    "user_id" bigint NOT NULL,
    "school_id" bigint NOT NULL,
    "is_verified" boolean
);


ALTER TABLE "public"."user_school" OWNER TO "postgres";


ALTER TABLE "public"."user_school" ALTER COLUMN "user_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_school_user_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE SEQUENCE IF NOT EXISTS "public"."users_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."users_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."users_id_seq" OWNED BY "public"."user"."id";



ALTER TABLE ONLY "public"."bug_reports" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."bug_reports_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."event_reports" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."event_reports_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."user" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."users_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."event"
    ADD CONSTRAINT "Events_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."event"
    ADD CONSTRAINT "Events_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."auth0_users"
    ADD CONSTRAINT "auth0_users_auth0_user_id_key" UNIQUE ("auth0_id");



ALTER TABLE ONLY "public"."auth0_users"
    ADD CONSTRAINT "auth0_users_pkey" PRIMARY KEY ("auth0_id");



ALTER TABLE ONLY "public"."bug_reports"
    ADD CONSTRAINT "bug_reports_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."event_reports"
    ADD CONSTRAINT "event_reports_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."favourites"
    ADD CONSTRAINT "favourites_pkey" PRIMARY KEY ("user_id", "event_id");



ALTER TABLE ONLY "public"."follows"
    ADD CONSTRAINT "follows_pkey" PRIMARY KEY ("user_id", "follower_id");



ALTER TABLE ONLY "public"."school"
    ADD CONSTRAINT "school_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "user_auth0_id_key" UNIQUE ("auth0_id");



ALTER TABLE ONLY "public"."user_school"
    ADD CONSTRAINT "user_school_pkey" PRIMARY KEY ("user_id", "school_id");



ALTER TABLE ONLY "public"."user_school"
    ADD CONSTRAINT "user_school_school_id_key" UNIQUE ("school_id");



ALTER TABLE ONLY "public"."user_school"
    ADD CONSTRAINT "user_school_user_id_key" UNIQUE ("user_id");



ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "users_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "users_username_key" UNIQUE ("username");



CREATE INDEX "ix_bug_reports_id" ON "public"."bug_reports" USING "btree" ("id");



CREATE INDEX "ix_event_reports_id" ON "public"."event_reports" USING "btree" ("id");



ALTER TABLE ONLY "public"."bug_reports"
    ADD CONSTRAINT "bug_reports_reporter_id_fkey" FOREIGN KEY ("reporter_id") REFERENCES "public"."user"("id");



ALTER TABLE ONLY "public"."event_reports"
    ADD CONSTRAINT "event_reports_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."event"("id");



ALTER TABLE ONLY "public"."event_reports"
    ADD CONSTRAINT "event_reports_reporter_id_fkey" FOREIGN KEY ("reporter_id") REFERENCES "public"."user"("id");



ALTER TABLE ONLY "public"."event"
    ADD CONSTRAINT "events_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."favourites"
    ADD CONSTRAINT "favourites_event_id_fkey" FOREIGN KEY ("event_id") REFERENCES "public"."event"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."favourites"
    ADD CONSTRAINT "favourites_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."follows"
    ADD CONSTRAINT "follows_follower_id_fkey" FOREIGN KEY ("follower_id") REFERENCES "public"."user"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."follows"
    ADD CONSTRAINT "follows_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user"
    ADD CONSTRAINT "user_auth0_id_fkey" FOREIGN KEY ("auth0_id") REFERENCES "public"."auth0_users"("auth0_id") ON UPDATE CASCADE;



ALTER TABLE ONLY "public"."user_school"
    ADD CONSTRAINT "user_school_school_id_fkey" FOREIGN KEY ("school_id") REFERENCES "public"."school"("id") ON UPDATE CASCADE;



ALTER TABLE ONLY "public"."user_school"
    ADD CONSTRAINT "user_school_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."user"("id") ON UPDATE CASCADE;



CREATE POLICY "Allow owners to delete their events" ON "public"."event" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."user" "u"
  WHERE (("u"."id" = "event"."user_id") AND ("u"."auth0_id" = ("auth"."uid"())::"text")))));



CREATE POLICY "Allow owners to insert events" ON "public"."event" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Allow owners to update their events" ON "public"."event" FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."user" "u"
  WHERE (("u"."id" = "event"."user_id") AND ("u"."auth0_id" = ("auth"."uid"())::"text"))))) WITH CHECK (true);



CREATE POLICY "Allow owners to view their drafts" ON "public"."event" FOR SELECT TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."user" "u"
  WHERE (("u"."id" = "event"."user_id") AND ("u"."auth0_id" = ("auth"."uid"())::"text")))) AND ("is_public" = false)));



CREATE POLICY "Allow public events to be viewed by anyone" ON "public"."event" FOR SELECT TO "authenticated", "anon" USING (("is_public" = true));



CREATE POLICY "Allows authenticated (logged in) users to view favourites" ON "public"."favourites" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."user" "u"
  WHERE (("u"."id" = "favourites"."user_id") AND ("u"."auth0_id" = ("auth"."uid"())::"text")))));



CREATE POLICY "Allows users to add favourites" ON "public"."favourites" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Allows users to remove their favourites" ON "public"."favourites" FOR DELETE USING ((EXISTS ( SELECT 1
   FROM "public"."user" "u"
  WHERE (("u"."id" = "favourites"."user_id") AND ("u"."auth0_id" = ("auth"."uid"())::"text")))));



ALTER TABLE "public"."auth0_users" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."bug_reports" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."event" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."event_reports" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."favourites" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."follows" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."school" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_school" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."event";



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";






















































































































































































































































































































GRANT ALL ON TABLE "public"."event" TO "anon";
GRANT ALL ON TABLE "public"."event" TO "authenticated";
GRANT ALL ON TABLE "public"."event" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Events_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Events_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Events_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."auth0_users" TO "anon";
GRANT ALL ON TABLE "public"."auth0_users" TO "authenticated";
GRANT ALL ON TABLE "public"."auth0_users" TO "service_role";



GRANT ALL ON TABLE "public"."bug_reports" TO "anon";
GRANT ALL ON TABLE "public"."bug_reports" TO "authenticated";
GRANT ALL ON TABLE "public"."bug_reports" TO "service_role";



GRANT ALL ON SEQUENCE "public"."bug_reports_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."bug_reports_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."bug_reports_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."event_reports" TO "anon";
GRANT ALL ON TABLE "public"."event_reports" TO "authenticated";
GRANT ALL ON TABLE "public"."event_reports" TO "service_role";



GRANT ALL ON SEQUENCE "public"."event_reports_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."event_reports_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."event_reports_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."favourites" TO "anon";
GRANT ALL ON TABLE "public"."favourites" TO "authenticated";
GRANT ALL ON TABLE "public"."favourites" TO "service_role";



GRANT ALL ON TABLE "public"."follows" TO "anon";
GRANT ALL ON TABLE "public"."follows" TO "authenticated";
GRANT ALL ON TABLE "public"."follows" TO "service_role";



GRANT ALL ON TABLE "public"."school" TO "anon";
GRANT ALL ON TABLE "public"."school" TO "authenticated";
GRANT ALL ON TABLE "public"."school" TO "service_role";



GRANT ALL ON SEQUENCE "public"."school_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."school_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."school_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."user" TO "anon";
GRANT ALL ON TABLE "public"."user" TO "authenticated";
GRANT ALL ON TABLE "public"."user" TO "service_role";



GRANT ALL ON TABLE "public"."user_school" TO "anon";
GRANT ALL ON TABLE "public"."user_school" TO "authenticated";
GRANT ALL ON TABLE "public"."user_school" TO "service_role";



GRANT ALL ON SEQUENCE "public"."user_school_user_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_school_user_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_school_user_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."users_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."users_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."users_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
